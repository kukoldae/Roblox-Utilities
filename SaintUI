local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")

local DefaultFont = Font.fromId(12187373327)
local BoldFont = Font.fromId(12187373327)
BoldFont.Weight = Enum.FontWeight.Bold
local Config = loadstring(game:HttpGet("https://raw.githubusercontent.com/kukoldae/Roblox-Utilities/refs/heads/main/Config"))()
local discord_url = "https://discord.gg/Zd9bu2szyZ"
local current_key = game:HttpGet("https://pastebin.com/raw/MX0xx7LW")
local user_path = "SaintHub/"..tostring(game.GameId).."/"..tostring(game:GetService("Players").LocalPlayer.UserId)

local key_cfg = Config.new(user_path.."/key.json", {
    key = ""
})

--=========================================== UTILS FUNCTIONS =========================================== 
function SendNotification(Title, Text, Icon, Duration) 
	if not Icon then Icon = "" end 
	if not Duration then Duration = 5 end

	game:GetService("StarterGui"):SetCore("SendNotification", {
		Title = "Saint Hub", Text = Text, Icon = Icon, Duration = Duration }
	) 
end

-- =========================== Classes 
-- ============= BaseUI 
local BaseUI = {}
BaseUI.__index = BaseUI

function BaseUI.New(main)
    local new = {}
    new.Main = main
    setmetatable(new, BaseUI)

    return new
end

function BaseUI:Visible(state)
    self.Main.Visible = state
end

-- ============= ItemsContainerUI
local ItemsContainerUI = {}
ItemsContainerUI.__index = ItemsContainerUI

function ItemsContainerUI.New(main)
    local new = BaseUI.New(main)

    setmetatable(new, ItemsContainerUI)

    return new
end

function ItemsContainerUI:Button(text, callback)
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Button"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    -- UI.AutomaticSize = "Y"
    UI.Size = UDim2.new(0.95, 0, 0, 25)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1

    local ButtonClass = table.clone(BaseUI.New(UI))
    ButtonClass.Callback = callback

    UI = Instance.new("TextButton", ButtonClass.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 1, 0)
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    UI.BorderColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 2
    UI.AutoButtonColor = false
    ButtonClass.Button = UI

    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.TextXAlignment = "Center"
    UI.Text = text
    UI.TextSize = 13
    UI.FontFace = DefaultFont

    ButtonClass.Button.MouseButton1Click:Connect(function()
        if ButtonClass.Callback then
            ButtonClass.Callback()
        end
    end)

    function ButtonClass:SetCallback(func)
        self.Callback = func
    end

    function ButtonClass:SetText(text)
        self.Button.Text = text
    end

    return ButtonClass
end

function ItemsContainerUI:Section(text)
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Section"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.AutomaticSize = "Y"
    UI.Size = UDim2.new(0.95, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1
    UI.ClipsDescendants = true

    local Class = table.clone(BaseUI.New(UI))

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.Main)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 0)
    UI.FillDirection = "Horizontal"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Center"
    UI.ItemLineAlignment = "Automatic"
    UI.SortOrder = "LayoutOrder"

    -- Text
    UI = Instance.new("TextLabel", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.AutomaticSize = "X"
    UI.Size = UDim2.new(0, 0, 0, 19)
    UI.BackgroundTransparency = 1
    UI.TextSize = 14
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    Class.Label = UI

    -- Line
    UI = Instance.new("Frame", Class.Main)
    UI.Name = "Line"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 1)
    UI.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 0
    UI.LayoutOrder = 10

    function Class:SetText(text)
        self.Label.Text = text .. " "
    end

    Class:SetText(text)
    return Class
end

function ItemsContainerUI:Label(text)
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Label"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.AutomaticSize = "Y"
    UI.Size = UDim2.new(0.95, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1
    UI.ClipsDescendants = true

    local Class = table.clone(BaseUI.New(UI))

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.Main)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 0)
    UI.FillDirection = "Horizontal"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Top"
    UI.ItemLineAlignment = "Automatic"
    UI.SortOrder = "LayoutOrder"

    -- Text
    UI = Instance.new("TextLabel", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.AutomaticSize = "Y"
    UI.Size = UDim2.new(1, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.TextSize = 14
    UI.TextWrapped = true
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    Class.Label = UI

    function Class:SetText(text)
        self.Label.Text = text .. " "
    end

    Class:SetText(text)
    return Class
end

function ItemsContainerUI:Toggle(text, callback, value)
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Toggle"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.AutomaticSize = "Y"
    UI.Size = UDim2.new(0.95, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1
    UI.ClipsDescendants = true

    local Class = table.clone(BaseUI.New(UI))

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.Main)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 3)
    UI.FillDirection = "Horizontal"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Center"
    UI.ItemLineAlignment = "Center"
    UI.SortOrder = "LayoutOrder"

    UI = Instance.new("ImageButton", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(0, 21, 0, 21)
    UI.Image = "rbxassetid://18898130016"
    UI.BackgroundTransparency = 1
    Class.Button = UI

    -- Text
    UI = Instance.new("TextLabel", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.AutomaticSize = "X"
    UI.Size = UDim2.new(0, 0, 0, 19)
    UI.BackgroundTransparency = 1
    UI.TextSize = 13
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    Class.Label = UI

    function Class:SetText(text)
        self.Label.Text = text
    end

    function Class:SetCallback(func)
        self.Callback = func
    end

    function Class:Set(state)
        self.State = state
        if self.State then
            self.Button.Image = "rbxassetid://18898203112"
        else
            self.Button.Image = "rbxassetid://18898130016"
        end

        if self.Callback then
            self.Callback(state)
        end
    end

    Class.State = false
    Class:SetCallback(callback)
    Class:SetText(text)

    Class.Button.MouseButton1Click:Connect(function()
        Class:Set(not Class.State)
    end)

    if value then
        Class:Set(value)
    end

    return Class
end

function ItemsContainerUI:Input(text, callback)
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Input"
    UI.AutomaticSize = "Y"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(0.95, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1

    local Class = table.clone(BaseUI.New(UI))

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.Main)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0.01, 6)
    UI.FillDirection = "Vertical"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Top"
    UI.ItemLineAlignment = "Automatic"
    UI.SortOrder = "LayoutOrder"

    -- Text
    UI = Instance.new("TextLabel", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.AutomaticSize = "Y"
    UI.Size = UDim2.new(1, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.TextSize = 14
    UI.TextWrapped = true
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.Text = text
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    Class.Label = UI
    UI.LayoutOrder = 0

    UI = Instance.new("Frame", Class.Main)
    UI.Name = "EditBox"
    UI.AutomaticSize = "Y"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 0)
    UI.BackgroundTransparency = 0
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    UI.BorderColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 2
    UI.LayoutOrder = 2

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.Main.EditBox)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0.01, 6)
    UI.FillDirection = "Vertical"
    UI.HorizontalAlignment = "Center"
    UI.VerticalAlignment = "Center"
    -- UI.ItemLineAlignment = "Strech"
    UI.SortOrder = "LayoutOrder"

    -- TextBox
    UI = Instance.new("TextBox", Class.Main.EditBox)
    UI.Name = "TextBox"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    UI.Size = UDim2.new(0.96, 0, 0, 25)
    UI.BorderSizePixel = 0
    UI.TextSize = 13
    UI.Text = ""
    UI.TextWrapped = true
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.ClearTextOnFocus = false
    UI.TextTransparency = 0.1
    Class.Input = UI

    function Class:SetText(text)
        self.Label.Text = text
    end

    function Class:SetInput(text)
        self.Input.Text = text
    end

    function Class:GetInput()
        return self.Input.Text
    end

    function Class:SetInputPh(text)
        self.Input.PlaceholderText = text
    end

    Class.Input.FocusLost:Connect(function()
        if callback then
            callback(Class.Input.Text)
        end
    end)

    return Class
end

function ItemsContainerUI:Selector(text, callback, default)
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Selector"
    UI.AutomaticSize = "Y"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(0.95, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1

    local Class = BaseUI.New(UI)

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.Main)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 4)
    UI.FillDirection = "Vertical"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Top"
    -- UI.ItemLineAlignment = "Automatic"
    UI.SortOrder = "LayoutOrder"

    -- Text
    UI = Instance.new("TextLabel", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.AutomaticSize = "Y"
    UI.Size = UDim2.new(1, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.TextSize = 14
    UI.TextWrapped = true
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.Text = text
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.LayoutOrder = 0
    Class.Label = UI

    -- Button
    UI = Instance.new("TextButton", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 0, 24)
    UI.BackgroundTransparency = 0
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    UI.BorderColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 2
    UI.TextSize = 14
    UI.TextWrapped = false
    UI.AutoButtonColor = false
    UI.FontFace = BoldFont
    UI.TextXAlignment = "Left"
    UI.Text = ""
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.LayoutOrder = 1
    Class.Button = UI

    -- Image 
    UI = Instance.new("ImageLabel", Class.Button)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.975, 0, 0.5, 0)
    UI.Size = UDim2.new(0, 20, 0, 20)
    UI.Image = "rbxassetid://18898200318"
    UI.ImageTransparency = 0.2
    UI.BackgroundTransparency = 1
    UI.Rotation = 180
    UI.Interactable = false
    Class.Image = UI

    UI = Instance.new("Frame", Class.Button)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 1, 0)
    UI.BackgroundTransparency = 1

    -- UIListLayout
    UI = Instance.new("UIListLayout", UI)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 0)
    UI.FillDirection = "Horizontal"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Center"
    UI.ItemLineAlignment = "Center"
    UI.SortOrder = "LayoutOrder"

    UI = Instance.new("Frame", Class.Button.Frame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(0.02, 0, 1, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = -1

    -- Item Text
    UI = Instance.new("TextLabel", Class.Button.Frame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.AutomaticSize = "X"
    UI.Size = UDim2.new(0, 0, 0, 14)
    UI.BackgroundTransparency = 1
    UI.TextSize = 12
    UI.TextWrapped = true
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.Text = "None"
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    Class.ItemLabel = UI

    -- Items Frame
    UI = Instance.new("Frame", Class.Main)
    UI.Name = "Items"
    UI.AutomaticSize = "Y"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 0)
    UI.BackgroundTransparency = 0
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    UI.BorderColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 2
    UI.LayoutOrder = 5
    UI.Visible = false
    Class.ItemsFrame = UI

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.ItemsFrame)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 2)
    UI.FillDirection = "Vertical"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Top"
    UI.ItemLineAlignment = "End"
    UI.SortOrder = "LayoutOrder"

    UI = Instance.new("Frame", Class.ItemsFrame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 1)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = -1

    UI = Instance.new("Frame", Class.ItemsFrame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 1)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = 999

    function Class:CreateItem(name)
        -- Button
        UI = Instance.new("TextButton", Class.ItemsFrame)
        UI.AnchorPoint = Vector2.new(0.5, 0.5)
        UI.Size = UDim2.new(1, 0, 0, 16)
        UI.BackgroundTransparency = 1
        UI.TextSize = 14
        UI.TextWrapped = false
        UI.FontFace = DefaultFont
        UI.TextXAlignment = "Center"
        UI.Text = name
        UI.TextColor3 = Color3.fromRGB(80, 80, 80)
        UI.LayoutOrder = 1
        UI.AutoButtonColor = false

        local Button = BaseUI.New(UI)
        self.Items[name] = Button

        function Button:SelectColor(state)
            if state then
                self.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
            else
                self.Main.TextColor3 = Color3.fromRGB(80, 80, 80)
            end
        end

        Button.Main.MouseButton1Click:Connect(function()
            Class:Select(name)
        end)
    end

    Class.Items = {}
    Class.Callback = callback

    function Class:Select(name)
        self.ItemLabel.Text = ""
        for k, v in pairs(self.Items) do
            v:SelectColor(k == name)
            if k == name then
                self.ItemLabel.Text = name
                if self.Callback then
                    self.Callback(name)
                end
            end
        end
    end

    Class.Open = false

    Class.Button.MouseButton1Click:Connect(function()
        Class:Change(not Class.Open)
    end)

    function Class:Change(state)
        local time = .3
        self.Open = state
        Class.ItemsFrame.Visible = state

        if self.Open then
            TweenService:Create(self.Image, TweenInfo.new(time), {
                Rotation = 90
            }):Play()

            wait(time)
        else
            TweenService:Create(self.Image, TweenInfo.new(time), {
                Rotation = 180
            }):Play()
            wait(time)
        end
    end

    function Class:SetCallback(func)
        self.Callback = func
    end

    if default then
        Class:Select(default)
    end

    return Class
end

function ItemsContainerUI:Container(text)
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Container"
    UI.AutomaticSize = "Y"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(0.95, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1

    local Class = BaseUI.New(UI)

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.Main)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 4)
    UI.FillDirection = "Vertical"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Top"
    -- UI.ItemLineAlignment = "Automatic"
    UI.SortOrder = "LayoutOrder"
    -- Button
    UI = Instance.new("TextButton", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 0, 24)
    UI.BackgroundTransparency = 0
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    UI.BorderColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 2
    UI.TextSize = 14
    UI.TextWrapped = false
    UI.AutoButtonColor = false
    UI.FontFace = BoldFont
    UI.TextXAlignment = "Left"
    UI.Text = ""
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.LayoutOrder = 1
    Class.Button = UI

    -- Image 
    UI = Instance.new("ImageLabel", Class.Button)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.975, 0, 0.5, 0)
    UI.Size = UDim2.new(0, 20, 0, 20)
    UI.Image = "rbxassetid://18898200318"
    UI.ImageTransparency = 0.2
    UI.BackgroundTransparency = 1
    UI.Rotation = 180
    UI.Interactable = false
    Class.Image = UI

    UI = Instance.new("Frame", Class.Button)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 1, 0)
    UI.BackgroundTransparency = 1

    -- UIListLayout
    UI = Instance.new("UIListLayout", UI)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 0)
    UI.FillDirection = "Horizontal"
    UI.HorizontalAlignment = "Left"
    UI.VerticalAlignment = "Center"
    UI.ItemLineAlignment = "Center"
    UI.SortOrder = "LayoutOrder"

    UI = Instance.new("Frame", Class.Button.Frame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(0.02, 0, 1, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = -1

    -- Item Text
    UI = Instance.new("TextLabel", Class.Button.Frame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.AutomaticSize = "X"
    UI.Size = UDim2.new(0, 0, 0, 14)
    UI.BackgroundTransparency = 1
    UI.TextSize = 13
    UI.TextWrapped = true
    UI.FontFace = DefaultFont
    UI.TextXAlignment = "Left"
    UI.Text = text
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    Class.Label = UI

    -- Items Frame
    UI = Instance.new("Frame", Class.Main)
    UI.Name = "Items"
    UI.AutomaticSize = "Y"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 0)
    UI.BackgroundTransparency = 0
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    UI.BorderColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 2
    UI.LayoutOrder = 5
    UI.Visible = false
    Class.ItemsFrame = UI
    Class.Create = ItemsContainerUI.New(Class.ItemsFrame)

    -- UIListLayout
    UI = Instance.new("UIListLayout", Class.ItemsFrame)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 12)
    UI.FillDirection = "Vertical"
    UI.HorizontalAlignment = "Center"
    UI.VerticalAlignment = "Top"
    UI.ItemLineAlignment = "Automatic"
    UI.SortOrder = "LayoutOrder"

    UI = Instance.new("Frame", Class.ItemsFrame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 1)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = -1

    UI = Instance.new("Frame", Class.ItemsFrame)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 1)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = 999

    Class.Open = false
    Class.Button.MouseButton1Click:Connect(function()
        Class:Change(not Class.Open)
    end)

    function Class:Change(state)
        local time = .3
        self.Open = state
        Class.ItemsFrame.Visible = state

        if self.Open then
            TweenService:Create(self.Image, TweenInfo.new(time), {
                Rotation = 90
            }):Play()

            wait(time)
        else
            TweenService:Create(self.Image, TweenInfo.new(time), {
                Rotation = 180
            }):Play()
            wait(time)
        end
    end

    return Class
end

function ItemsContainerUI:Frame()
    local UI = Instance.new("Frame", self.Main)
    UI.Name = "Frame"
    UI.AutomaticSize = "Y"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 0)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = #self.Main:GetChildren() + 1

    local Class = BaseUI.New(UI)
    Class.Create = ItemsContainerUI.New(UI)  

    -- UIListLayout
    UI = Instance.new("UIListLayout", UI)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0, 12)
    UI.FillDirection = "Vertical"
    UI.HorizontalAlignment = "Center"
    UI.VerticalAlignment = "Top"
    UI.ItemLineAlignment = "Automatic"
    UI.SortOrder = "LayoutOrder"

    UI = Instance.new("Frame", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 1)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = -1

    UI = Instance.new("Frame", Class.Main)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 1)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = 999


    return Class
end

function CreateMain(Lib)
    local UI = nil
    UI = Instance.new("Frame", Lib.UIs.ScreenGui)
    UI.Name = "Main"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(0, 600, 0, 400)
    UI.Visible = false
    Lib.UIs.Main = UI
    local Class = BaseUI.New(UI)
    Lib.Classes["Main"] = Class

    UI = Instance.new("UICorner", Lib.UIs.Main)
    UI.CornerRadius = UDim.new(0.025, 0)

    UI = Instance.new("Frame", Lib.UIs.Main)
    UI.Name = "Top"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.046, 0)
    UI.Size = UDim2.new(1, 0, 0.092, 0)
    UI.BackgroundTransparency = 1

    UI = Instance.new("ImageButton", Lib.UIs.Main.Top)
    UI.Name = "CloseButton"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.967, 0, 0.469, 0)
    UI.Size = UDim2.new(0.026, 0, 0.455, 0)
    UI.Image = "rbxassetid://18898155697"
    UI.BackgroundTransparency = 1
    Lib.UIs.CloseButton = UI

    UI = Instance.new("ImageLabel", Lib.UIs.Main.Top)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.035, 0, 0.455, 0)
    UI.Size = UDim2.new(0.042, 0, 0.727, 0)
    UI.Image = "rbxassetid://136536265784849"
    UI.BackgroundTransparency = 1

    UI = Instance.new("TextLabel", Lib.UIs.Main.Top)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(0.89, 0, 0.455, 0)
    UI.BackgroundTransparency = 1
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.TextXAlignment = "Left"
    UI.Text = "Saint Hub"
    UI.TextScaled = true
    UI.FontFace = BoldFont
    -- UI.FontFace = DefaultFont
    Lib.UIs.NameLabel = UI

    -- Line
    UI = Instance.new("Frame", Lib.UIs.Main)
    UI.Name = "Line"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.09, 0)
    UI.Size = UDim2.new(0.995, 0, 0, 3)
    UI.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 0
    UI.ZIndex = 2

    -- DropShadow
    UI = Instance.new("Frame", Lib.UIs.Main)
    UI.Name = "DropShadow"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 1, 0)
    UI.BackgroundTransparency = 1
    UI.ZIndex = -100

    UI = Instance.new("ImageLabel", Lib.UIs.Main.DropShadow)
    UI.Name = "Shadow"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 47, 1, 47)
    UI.BackgroundTransparency = 1
    UI.Image = "rbxassetid://6014261993"
    UI.ImageColor3 = Color3.fromRGB(0, 0, 0)
    UI.ImageTransparency = 0.5
    UI.SliceCenter = Rect.new(49, 49, 450, 450)
    UI.SliceScale = 1
    UI.ScaleType = "Slice"
    UI.ZIndex = -100

    -- Center
    UI = Instance.new("Frame", Lib.UIs.Main)
    UI.Name = "Center"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.545, 0)
    UI.Size = UDim2.new(1, 0, 0, 367)
    UI.BackgroundColor3 = Color3.fromRGB(25, 25, 25)

    UI = Instance.new("UICorner", Lib.UIs.Main.Center)
    UI.CornerRadius = UDim.new(0.03, 0)

    -- Line
    UI = Instance.new("Frame", Lib.UIs.Main.Center)
    UI.Name = "Line"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.22, 0, 0.5, 0)
    UI.Size = UDim2.new(0, 3, 0.995, 0)
    UI.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    UI.BorderSizePixel = 0
    UI.ZIndex = 2

    -- TabsList
    UI = Instance.new("Frame", Lib.UIs.Main.Center)
    UI.Name = "TabsList"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.109, 0, 0.502, 0)
    UI.Size = UDim2.new(0, 131, 0, 365)
    UI.BackgroundTransparency = 1
    Lib.UIs.TabsList = UI

    -- UIListLayout
    UI = Instance.new("UIListLayout", Lib.UIs.TabsList)
    UI.Name = "UIListLayout"
    UI.Padding = UDim.new(0.01, 0)
    UI.HorizontalAlignment = "Center"
    UI.ItemLineAlignment = "End"
    UI.SortOrder = "LayoutOrder"

    -- Padding
    UI = Instance.new("Frame", Lib.UIs.TabsList)
    UI.Name = "Padding"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Size = UDim2.new(1, 0, 0, 8)
    UI.BackgroundTransparency = 1
    UI.LayoutOrder = -10

    -- TabsContent
    UI = Instance.new("Frame", Lib.UIs.Main.Center)
    UI.Name = "TabsContent"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.61, 0, 0.5, 0)
    UI.Size = UDim2.new(0, 467, 0, 363)
    UI.BackgroundTransparency = 1
    Lib.UIs.TabsContent = UI

    function Lib:SelectTab(name)
        local tab = Lib.Tabs[name]
        if tab then
            for k, v in pairs(Lib.Tabs) do
                local btn = v["Button"]
                local content = v["Content"]

                btn:SelectColor(k == name)
                content:Visible(k == name)

                Lib.SelectedTab = name
            end
        end
    end

    function Lib:CreateTab(name)
        function CreateTabButton(name)
            local UI = Instance.new("TextButton", Lib.UIs.TabsList)
            UI.Name = name
            UI.AnchorPoint = Vector2.new(0.5, 0.5)
            UI.Size = UDim2.new(0, 115, 0, 20)
            UI.BackgroundTransparency = 1
            UI.LayoutOrder = #Lib.UIs.TabsList:GetChildren() + 1
            UI.TextColor3 = Color3.fromRGB(80, 80, 80)
            UI.TextXAlignment = "Left"
            UI.Text = name
            UI.TextSize = 15
            -- UI.FontFace = BoldFont
            UI.FontFace = DefaultFont

            local TabButton = BaseUI.New(UI)

            function TabButton:SelectColor(state)
                if state then
                    self.Main.TextColor3 = Color3.fromRGB(255, 255, 255)
                else
                    self.Main.TextColor3 = Color3.fromRGB(80, 80, 80)
                end
            end

            TabButton.Main.MouseButton1Click:Connect(function()
                Lib:SelectTab(name)
            end)

            return TabButton
        end

        function CreateTabContent(name)
            local UI = Instance.new("Frame", Lib.UIs.TabsContent)
            local TabContent = BaseUI.New(UI)
            TabContent:Visible(false)

            UI.Name = name
            UI.AnchorPoint = Vector2.new(0.5, 0.5)
            UI.Position = UDim2.new(0.5, 0, 0.5, 0)
            UI.Size = UDim2.new(1, 0, 1, 0)
            UI.BackgroundTransparency = 1
            TabContent.Main = UI

            UI = Instance.new("ScrollingFrame", UI)
            UI.Name = "Items"
            UI.AnchorPoint = Vector2.new(0.5, 0.5)
            UI.Position = UDim2.new(0.494, 0, 0.5, 0)
            UI.Size = UDim2.new(0.99, 0, 1, 0)
            UI.BackgroundTransparency = 1

            UI.TopImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
            UI.MidImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
            UI.BottomImage = "rbxasset://textures/ui/Scroll/scroll-middle.png"
            UI.ScrollBarImageTransparency = 0
            UI.ScrollBarThickness = 2
            UI.ScrollingDirection = "Y"
            UI.AutomaticCanvasSize = "Y"
            UI.ElasticBehavior = "Never"
            UI.BorderSizePixel = 0
            UI.ScrollBarImageColor3 = Color3.fromRGB(54, 54, 54)
            UI.CanvasSize = UDim2.new(0.99, 0, 1, 0)
            TabContent.Frame = UI

            UI = Instance.new("UIListLayout", TabContent.Frame)
            UI.Name = "UIListLayout"
            UI.Padding = UDim.new(0, 8)
            UI.HorizontalAlignment = "Center"
            UI.VerticalAlignment = "Top"
            -- UI.VerticalFlex = "SpaceBetween"
            UI.ItemLineAlignment = "Automatic"
            UI.SortOrder = "LayoutOrder"
            UI.FillDirection = "Vertical"

            UI = Instance.new("Frame", TabContent.Frame)
            UI.Name = "Padding"
            UI.AnchorPoint = Vector2.new(0.5, 0.5)
            UI.Size = UDim2.new(0.95, 0, 0, 2)
            UI.BackgroundTransparency = 1
            UI.LayoutOrder = -10

            UI = Instance.new("Frame", TabContent.Frame)
            UI.Name = "Padding"
            UI.AnchorPoint = Vector2.new(0.5, 0.5)
            UI.Size = UDim2.new(0.95, 0, 0, 2)
            UI.BackgroundTransparency = 1
            UI.LayoutOrder = 9999

            return TabContent
        end

        local TabClass = BaseUI.New()
        TabClass.Button = CreateTabButton(name)
        TabClass.Content = CreateTabContent(name)
        TabClass.Create = ItemsContainerUI.New(TabClass.Content.Frame)

        function TabClass:Delete()
            TabClass.Content.Main:Destroy()
            TabClass.Button.Main:Destroy()
        end

        Lib.Tabs[name] = TabClass
        if not Lib.SelectedTab then
            Lib:SelectTab(name)
        end

        return TabClass
    end

    return Lib
end

function CreateLoading(Lib)
    local UI = nil
    UI = Instance.new("Frame", Lib.UIs.ScreenGui)
    UI.Name = "LoadingScreen"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.BackgroundColor3 = Color3.fromRGB(10, 10, 10)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(0, 222, 0, 148)
    UI.BorderSizePixel = 0
    UI.Visible = false
    Lib.UIs.LoadingScreen = UI
    local Class = BaseUI.New(UI)
    Lib.Classes["LoadingScreen"] = Class

    UI = Instance.new("UICorner", Lib.UIs.LoadingScreen)
    UI.CornerRadius = UDim.new(0.1, 0)

    -- DropShadow
    UI = Instance.new("Frame", Lib.UIs.LoadingScreen)
    UI.Name = "DropShadow"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 1, 0)
    UI.BackgroundTransparency = 1
    UI.ZIndex = -100

    UI = Instance.new("ImageLabel", UI)
    UI.Name = "Shadow"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 47, 1, 47)
    UI.BackgroundTransparency = 1
    UI.Image = "rbxassetid://6014261993"
    UI.ImageColor3 = Color3.fromRGB(0, 0, 0)
    UI.ImageTransparency = 0.5
    UI.SliceCenter = Rect.new(49, 49, 450, 450)
    UI.SliceScale = 1
    UI.ScaleType = "Slice"
    UI.ZIndex = -100

    UI = Instance.new("ImageLabel", Lib.UIs.LoadingScreen)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.272, 0, 0.495, 0)
    UI.Size = UDim2.new(0, 70, 0, 70)
    UI.Image = "rbxassetid://136536265784849"
    UI.BackgroundTransparency = 1

    UI = Instance.new("TextLabel", Lib.UIs.LoadingScreen)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.596, 0, 0.495, 0)
    UI.Size = UDim2.new(0, 108, 0, 36)
    UI.BackgroundTransparency = 1
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.TextXAlignment = "Left"
    UI.Text = "Saint Hub"
    UI.Name = "Hub"
    UI.TextScaled = true
    UI.FontFace = BoldFont

    UI = Instance.new("TextLabel", Lib.UIs.LoadingScreen)
    UI.Name = "Autor"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.673, 0, 0.614, 0)
    UI.Size = UDim2.new(0, 143, 0, 24)
    UI.BackgroundTransparency = 1
    UI.TextColor3 = Color3.fromRGB(255, 255, 255)
    UI.TextXAlignment = "Left"
    UI.Text = "@wizfiz"
    UI.TextScaled = false
    UI.TextSize = 13
    UI.FontFace = DefaultFont

    function Class:Visible(state)
        local time = .5
        if state then
            -- LoadingScreen
            Lib.UIs.LoadingScreen.BackgroundTransparency = 1
            Lib.UIs.LoadingScreen.Visible = true
            TweenService:Create(Lib.UIs.LoadingScreen, TweenInfo.new(time), {
                BackgroundTransparency = 0
            }):Play()

            -- Autor
            Lib.UIs.LoadingScreen.Autor.TextTransparency = 1
            TweenService:Create(Lib.UIs.LoadingScreen.Autor, TweenInfo.new(time), {
                TextTransparency = 0
            }):Play()

            -- Hub
            Lib.UIs.LoadingScreen.Hub.TextTransparency = 1
            TweenService:Create(Lib.UIs.LoadingScreen.Hub, TweenInfo.new(time), {
                TextTransparency = 0
            }):Play()

            -- Hub
            Lib.UIs.LoadingScreen.ImageLabel.ImageTransparency = 1
            TweenService:Create(Lib.UIs.LoadingScreen.ImageLabel, TweenInfo.new(time), {
                ImageTransparency = 0
            }):Play()

            -- Shadow
            Lib.UIs.LoadingScreen.DropShadow.Shadow.ImageTransparency = 1
            TweenService:Create(Lib.UIs.LoadingScreen.DropShadow.Shadow, TweenInfo.new(time), {
                ImageTransparency = 0.5
            }):Play()
            wait(time)
        else
            -- LoadingScreen
            Lib.UIs.LoadingScreen.BackgroundTransparency = 0
            TweenService:Create(Lib.UIs.LoadingScreen, TweenInfo.new(time), {
                BackgroundTransparency = 1
            }):Play()

            -- Autor
            Lib.UIs.LoadingScreen.Autor.TextTransparency = 0
            TweenService:Create(Lib.UIs.LoadingScreen.Autor, TweenInfo.new(time), {
                TextTransparency = 1
            }):Play()

            -- Hub
            Lib.UIs.LoadingScreen.Hub.TextTransparency = 0
            TweenService:Create(Lib.UIs.LoadingScreen.Hub, TweenInfo.new(time), {
                TextTransparency = 1
            }):Play()

            -- Hub
            Lib.UIs.LoadingScreen.ImageLabel.ImageTransparency = 0
            TweenService:Create(Lib.UIs.LoadingScreen.ImageLabel, TweenInfo.new(time), {
                ImageTransparency = 1
            }):Play()

            -- Shadow
            Lib.UIs.LoadingScreen.DropShadow.Shadow.ImageTransparency = 0.5
            TweenService:Create(Lib.UIs.LoadingScreen.DropShadow.Shadow, TweenInfo.new(time), {
                ImageTransparency = 1
            }):Play()

            wait(time)
            Lib.UIs.LoadingScreen.Visible = false
        end
    end
end

function CreateShowButton(Lib)
    local UI = nil
    UI = Instance.new("Frame", Lib.UIs.ScreenGui)
    UI.Name = "HubButton"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    UI.Position = UDim2.new(0.5, 0, 0.0, 0)
    UI.Size = UDim2.new(0, 35, 0, 35)
    UI.BorderSizePixel = 0
    UI.Visible = false
    Lib.UIs.OpenButton = UI

    UI = Instance.new("UICorner", Lib.UIs.OpenButton)
    UI.CornerRadius = UDim.new(0.2, 0)

    -- DropShadow
    UI = Instance.new("Frame", Lib.UIs.OpenButton)
    UI.Name = "DropShadow"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 0, 1, 0)
    UI.BackgroundTransparency = 1
    UI.ZIndex = -100

    UI = Instance.new("ImageLabel", UI)
    UI.Name = "Shadow"
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(1, 35, 1, 35)
    UI.BackgroundTransparency = 1
    UI.Image = "rbxassetid://6014261993"
    UI.ImageColor3 = Color3.fromRGB(0, 0, 0)
    UI.ImageTransparency = 0.5
    UI.SliceCenter = Rect.new(49, 49, 450, 450)
    UI.SliceScale = 1
    UI.ScaleType = "Slice"
    UI.ZIndex = -100

    UI = Instance.new("ImageButton", Lib.UIs.OpenButton)
    UI.AnchorPoint = Vector2.new(0.5, 0.5)
    UI.Position = UDim2.new(0.5, 0, 0.5, 0)
    UI.Size = UDim2.new(0.8, 0, 0.8, 0)
    UI.Image = "rbxassetid://136536265784849"
    UI.BackgroundTransparency = 1
    Lib.UIs.OpenBtn = UI

end

function ConnectMove(frame, frame_move)
    if not frame_move then frame_move = frame end

    local userInputService = game:GetService("UserInputService")
    local mouse = game.Players.LocalPlayer:GetMouse()

    local darg = false
    local click_pos = nil

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            darg = true
            click_pos = Vector2.new(userInputService:GetMouseLocation().X, userInputService:GetMouseLocation().Y)
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            darg = false
        end
    end)

    mouse.Move:Connect(function()
        if darg then
            local X, Y = userInputService:GetMouseLocation().X, userInputService:GetMouseLocation().Y
            local pos = Vector2.new(click_pos.X - X, click_pos.Y - Y)
            pos = Vector2.new(frame_move.AbsolutePosition.X - pos.X, frame_move.AbsolutePosition.Y - pos.Y)

            click_pos = Vector2.new(X, Y)

            frame_move.Position = UDim2.new(0, pos.X + frame_move.AbsoluteSize.X / 2, 0, pos.Y + frame_move.AbsoluteSize.Y / 2)
        end    
    end)
end

local SaintUI = {}

function CreateAutorize(Lib, toCreate)
    local authorization_tab = Lib:CreateTab("Authorization")
    authorization_tab.Create:Section("Key System")
    authorization_tab.Create:Label("")
    authorization_tab.Create:Label("This is a Free Script.\nYou can copy the key in our discord.")
    authorization_tab.Create:Label("")
    authorization_tab.Create:Label("")

    local input = authorization_tab.Create:Input("Key")
    input:SetInputPh("Write the key here")
    input:SetInput(key_cfg.data.key)

    authorization_tab.Create:Button("Enter", function()
        SaintUI:SetKey(input:GetInput())
        if SaintUI:IsAutorize() then
            SendNotification(script_name, "Link copied successfully")

            authorization_tab:Delete()
            Lib.Classes.Main:Visible(false)
            Lib.Classes.LoadingScreen:Visible(true)
            toCreate(Lib)

            task.wait(1)

            Lib.Classes.LoadingScreen:Visible(false)
            Lib.Classes.Main:Visible(true)
        end
    end)

    authorization_tab.Create:Label(" ")
    authorization_tab.Create:Label(" ")
    authorization_tab.Create:Label("")
    authorization_tab.Create:Label(" \n ")
    authorization_tab.Create:Button("Copy Discord Link", function()
        setclipboard(discord_url)
        SendNotification(script_name, "Link copied successfully")
    end)
end

function SaintUI:IsAutorize()
    key_cfg:Load()
    return current_key == key_cfg.data.key
end

function SaintUI:SetKey(key)
    key_cfg.data.key = key
    key_cfg:Save()
end

function SaintUI:Init(toCreate)
    if CoreGui:FindFirstChild("SaintUI") then
        CoreGui:FindFirstChild("SaintUI"):Destroy()
    end

    local Lib = {}
    Lib.SelectedTab = nil
    -- [name] : {button, content}
    Lib.Tabs = {}
    Lib.UIs = {}
    Lib.Classes = {}

    Lib.UIs.ScreenGui = nil

    Lib.UIs.Main = nil
    Lib.UIs.NameLabel = nil

    Lib.UIs.ScreenGui = Instance.new("ScreenGui", CoreGui)
    Lib.UIs.ScreenGui.Name = "SaintUI"

    CreateMain(Lib)
    ConnectMove(Lib.UIs.Main.Top, Lib.UIs.Main)

    CreateShowButton(Lib)
    ConnectMove(Lib.UIs.OpenButton.ImageButton, Lib.UIs.OpenButton)

    Lib.UIs.OpenBtn.MouseButton1Click:Connect(function()
        Lib.UIs.OpenButton.Visible = false
        Lib.Classes.Main:Visible(true)
    end)

    Lib.UIs.CloseButton.MouseButton1Click:Connect(function()
        Lib.UIs.OpenButton.Visible = true
        Lib.Classes.Main:Visible(false)
    end)

    function Lib:SetName(name)
        Lib.UIs.NameLabel.Text = name
    end


    CreateLoading(Lib)
    Lib.Classes.LoadingScreen:Visible(true)
    wait(1)

    if SaintUI:IsAutorize() then
        toCreate(Lib)
    else
        CreateAutorize(Lib, toCreate)
    end
    
    Lib.Classes.LoadingScreen:Visible(false)
    Lib.Classes.Main:Visible(true)
   
    

    return Lib
end

return SaintUI
