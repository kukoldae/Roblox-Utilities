local HttpService = game:GetService("HttpService")

local Class = {}
Class.__index = Class

function ConnectTables(cfg, cfg_base)
    local new = {}
    for key, value in pairs(cfg_base) do
        local cfg_value = cfg[key]
        if cfg_value then
            if typeof(value) == "table" then
                new[key] = ConnectTables(cfg_value, value)
            else
                new[key] = cfg_value
            end
        else
            new[key] = value
        end
    end

    return new
end

function SplitString(str, delimiter)
    local result = {}
    local start = 1
    while true do
        local s, e = string.find(str, delimiter, start)
        if s then
            table.insert(result, string.sub(str, start, s - 1))
            start = e + 1
        else
            table.insert(result, string.sub(str, start))
            break
        end
    end
    return result
end

function CreateDirectory(path)
    local parts = SplitString(path, "/")
    for index, folder_name in ipairs(parts) do
        if #SplitString(folder_name, ".j") > 1 then
            
        else
                 
            local crrpath = ""
            for i = 1, index do
                crrpath = crrpath .. parts[i] .. "/"
            end

            if not isfolder(crrpath) then
                makefolder(crrpath)
            end
        end        
    end
end

function Class.new(path, config_base)
	local new = {}
    new.path = path
    new.base = config_base
    new.data = config_base

    setmetatable(new, Class)

    CreateDirectory(path)
    new:Load()
    
    return new
end

function Class:Load()
    if isfile(self.path) then
        local success, data = pcall(function()
            return HttpService:JSONDecode(readfile(self.path))
        end)
        if success then
            self.data = ConnectTables(data, self.base)
        else
            self.data = self.base
            writefile(self.path, HttpService:JSONEncode(self.base))
        end
    else
        self.data = self.base
        writefile(self.path, HttpService:JSONEncode(self.base))
    end
end

function Class:Save()
    local success, data = pcall(function()
        return HttpService:JSONEncode(self.data)
    end)

    if success then
        writefile(self.path, data)
    else
        writefile(self.path, HttpService:JSONEncode(self.base)) 
    end
end

return Class
